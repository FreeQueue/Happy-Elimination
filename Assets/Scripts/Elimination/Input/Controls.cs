//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Main Game"",
            ""id"": ""ac28dcd0-f0f0-41af-95f4-cc5ab11ebf8d"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""9f57f35b-d5dd-4d3d-9574-831977d92d9c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointHold"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aeba4bfc-e000-44f3-bdb0-a8cbf5a1ca6b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cae6a690-dca3-4cc1-bbed-6ef50211b76e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d27c9eb-c8f7-4bfe-b6c7-24fae5c73be0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""CustomHolding"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main Game
        m_MainGame = asset.FindActionMap("Main Game", throwIfNotFound: true);
        m_MainGame_Point = m_MainGame.FindAction("Point", throwIfNotFound: true);
        m_MainGame_PointHold = m_MainGame.FindAction("PointHold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main Game
    private readonly InputActionMap m_MainGame;
    private List<IMainGameActions> m_MainGameActionsCallbackInterfaces = new List<IMainGameActions>();
    private readonly InputAction m_MainGame_Point;
    private readonly InputAction m_MainGame_PointHold;
    public struct MainGameActions
    {
        private @Controls m_Wrapper;
        public MainGameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Point => m_Wrapper.m_MainGame_Point;
        public InputAction @PointHold => m_Wrapper.m_MainGame_PointHold;
        public InputActionMap Get() { return m_Wrapper.m_MainGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGameActions set) { return set.Get(); }
        public void AddCallbacks(IMainGameActions instance)
        {
            if (instance == null || m_Wrapper.m_MainGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainGameActionsCallbackInterfaces.Add(instance);
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @PointHold.started += instance.OnPointHold;
            @PointHold.performed += instance.OnPointHold;
            @PointHold.canceled += instance.OnPointHold;
        }

        private void UnregisterCallbacks(IMainGameActions instance)
        {
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @PointHold.started -= instance.OnPointHold;
            @PointHold.performed -= instance.OnPointHold;
            @PointHold.canceled -= instance.OnPointHold;
        }

        public void RemoveCallbacks(IMainGameActions instance)
        {
            if (m_Wrapper.m_MainGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainGameActions instance)
        {
            foreach (var item in m_Wrapper.m_MainGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainGameActions @MainGame => new MainGameActions(this);
    public interface IMainGameActions
    {
        void OnPoint(InputAction.CallbackContext context);
        void OnPointHold(InputAction.CallbackContext context);
    }
}
